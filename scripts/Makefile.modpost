# ===========================================================================
# Module versions
# ===========================================================================
#
# Stage one of module building created the following:
# a) The individual .o files used for the module
# b) A <module>.o file which is the .o files above linked together
# c) A <module>.mod file in $(MODVERDIR)/, listing the name of the
#    the preliminary <module>.o file, plus all .o files

# Stage 2 is handled by this file and does the following
# 1) Find all modules from the files listed in $(MODVERDIR)/
# 2) modpost is then used to
# 3)  create one <module>.mod.c file pr. module
# 4)  create one Module.symvers file with CRC for all exported symbols
# 5) compute SDT offsets, generate SDT stubs, and compile all .mod.c files
# 6) generate CTF for the entire kernel, or for the module alone if this is
#    a build of an external module
# 7) final link of the module to a <module.ko> file

# Step 3 is used to place certain information in the module's ELF
# section, including information such as:
#   Version magic (see include/linux/vermagic.h for full details)
#     - Kernel release
#     - SMP is CONFIG_SMP
#     - PREEMPT is CONFIG_PREEMPT
#     - GCC Version
#   Module info
#     - Module version (MODULE_VERSION)
#     - Module alias'es (MODULE_ALIAS)
#     - Module license (MODULE_LICENSE)
#     - See include/linux/module.h for more details

# Step 4 is solely used to allow module versioning in external modules,
# where the CRC of each module is retrieved from the Module.symvers file.

# We need secondary expansion for 'module-ctfs-modular-prereq', below.

.SECONDEXPANSION:

# KBUILD_MODPOST_WARN can be set to avoid error out in case of undefined
# symbols in the final module linking stage
# KBUILD_MODPOST_NOFINAL can be set to skip the final link of modules.
# This is solely useful to speed up test compiles
PHONY := _modpost
_modpost: __modpost

include include/config/auto.conf
include scripts/Kbuild.include

# When building external modules load the Kbuild file to retrieve EXTRA_SYMBOLS info
ifneq ($(KBUILD_EXTMOD),)

# set src + obj - they may be used when building the .mod.c file
obj := $(KBUILD_EXTMOD)
src := $(obj)

# Include the module's Makefile to find KBUILD_EXTRA_SYMBOLS
include $(if $(wildcard $(KBUILD_EXTMOD)/Kbuild), \
             $(KBUILD_EXTMOD)/Kbuild, $(KBUILD_EXTMOD)/Makefile)
endif

include scripts/Makefile.lib

kernelsymfile := $(objtree)/Module.symvers
modulesymfile := $(firstword $(KBUILD_EXTMOD))/Module.symvers

# Step 1), find all modules listed in $(MODVERDIR)/
MODLISTCMD := find $(MODVERDIR) -name '*.mod' | xargs -r grep -h '\.ko$$' | sort -u
__modules := $(shell $(MODLISTCMD))
modules   := $(patsubst %.o,%.ko, $(wildcard $(__modules:.ko=.o)))

# Stop after building .o files if NOFINAL is set. Makes compile tests quicker
_modpost: $(if $(KBUILD_MODPOST_NOFINAL), $(modules:.ko:.o),$(modules))

# Step 2), invoke modpost
#  Includes step 3,4
modpost = scripts/mod/modpost                    \
 $(if $(CONFIG_MODVERSIONS),-m)                  \
 $(if $(CONFIG_MODULE_SRCVERSION_ALL),-a,)       \
 $(if $(KBUILD_EXTMOD),-i,-o) $(kernelsymfile)   \
 $(if $(KBUILD_EXTMOD),-I $(modulesymfile))      \
 $(if $(KBUILD_EXTRA_SYMBOLS), $(patsubst %, -e %,$(KBUILD_EXTRA_SYMBOLS))) \
 $(if $(KBUILD_EXTMOD),-o $(modulesymfile))      \
 $(if $(CONFIG_DEBUG_SECTION_MISMATCH),,-S)      \
 $(if $(KBUILD_EXTMOD)$(KBUILD_MODPOST_WARN),-w)

MODPOST_OPT=$(subst -i,-n,$(filter -i,$(MAKEFLAGS)))

# We can go over command line length here, so be careful.
quiet_cmd_modpost = MODPOST $(words $(filter-out vmlinux FORCE, $^)) modules
      cmd_modpost = $(MODLISTCMD) | sed 's/\.ko$$/.o/' | $(modpost) $(MODPOST_OPT) -s -T -

PHONY += __modpost
__modpost: $(modules:.ko=.o) FORCE
	$(call cmd,modpost) $(wildcard vmlinux)

quiet_cmd_kernel-mod = MODPOST $@
      cmd_kernel-mod = $(modpost) $@

vmlinux.o: FORCE
	$(call cmd,kernel-mod)

# Declare generated files as targets for modpost
$(symverfile):         __modpost ;
$(modules:.ko=.mod.c): __modpost ;

# Step 5), compile all *.mod.c files (includes the generation of SDT data
# and SDT stubs)

# modname is set to make c_flags define KBUILD_MODNAME
modname = $(notdir $(@:.mod.o=))

quiet_cmd_cc_o_c = CC      $@
      cmd_cc_o_c = $(CC) $(c_flags) $(KBUILD_CFLAGS_MODULE) $(CFLAGS_MODULE) \
		   -I$(dir $@) -c -o $@ $<

quiet_cmd_as_o_S = AS      $@
      cmd_as_o_S = $(CC) $(a_flags) -c -o $@ $<

ifdef CONFIG_DTRACE

sdtgen = $(srctree)/scripts/dtrace_sdt.sh

quiet_cmd_sdtinfo = SDTINF  $@
      cmd_sdtinfo = $(sdtgen) sdtinfo $@ $< kmod

quiet_cmd_sdtstub = SDTSTB  $@
      cmd_sdtstub = $(sdtgen) sdtstub $@ $<

# We depend on the .mod.c file to ensure that modpost runs before sdtinfo.
$(modules:.ko=.sdtinfo.c): %.sdtinfo.c: %.o %.mod.c
	$(call cmd,sdtinfo)

# We depend on the sdtinfo file because info generation rewrites the .o,
# while sdtstubs reads it.
$(modules:.ko=.sdtstub.S) : %.sdtstub.S: %.o %.sdtinfo.c
	$(call cmd,sdtstub)

$(modules:.ko=.mod.o): %.mod.o: %.mod.c %.sdtinfo.c FORCE
	$(call if_changed_dep,cc_o_c)

$(modules:.ko=.sdtstub.o): %.sdtstub.o: %.sdtstub.S
	$(call if_changed,as_o_S)

module-sdt-modular-prereq = %.sdtstub.o

else

$(modules:.ko=.mod.o): %.mod.o: %.mod.c FORCE
	$(call if_changed_dep,cc_o_c)

module-sdt-modular-prereq =

endif

targets += $(modules:.ko=.mod.o)

# Step 6), generate CTF for the entire kernel, or for the module alone if this
# is a build of an external module.

ifdef CONFIG_CTF

# This is quite tricky.  If called for non-external-modules, dwarf2ctf needs to
# be told about all the built-in objects as well as all the external modules --
# but Makefile.modpost only knows about the latter.  So the toplevel makefile
# emits the names of the built-in objects into a temporary file, which is
# then catted and its contents used as prerequisites by this rule.
#
# Because we only run dwarf2ctf once (in non-standalone-module mode), and it
# depends on a stamp file (because its real targets cannot change unless the
# object files change, in which case a relink of the appropriate modules is
# triggered anyway), we don't emit a filename in this output.
#
# Out-of-tree module CTF gets its own per-module set of stamp files, since its
# CTF is rebuilt independently.
#
# We write the names of the object files to be scanned for CTF content into a
# file, then use that, to avoid hitting command-line length limits.

ifeq ($(KBUILD_EXTMOD),)
ctf-dir := .ctf
quiet_cmd_ctf = CTF
      cmd_ctf = scripts/dwarf2ctf/dwarf2ctf $(ctf-dir) $(srctree) objects.builtin modules.builtin $(srctree)/scripts/dwarf2ctf/dedup.blacklist $(srctree)/scripts/dwarf2ctf/member.blacklist $(ctf-filelist)
builtins := $(shell cat objects.builtin 2>/dev/null)
ctf-stamp := .ctf/ctf.stamp
ctf-filelist := .ctf/ctf.filelist

# The CTF module depends on the CTF stamp file, in lieu of the builtin
# CTF files whose names we cannot determine until it is too late.

kernel/ctf/ctf.ko: .ctf/ctf.stamp

else
ctf-dir := $(KBUILD_EXTMOD)/.ctf
quiet_cmd_ctf = CTF
      cmd_ctf = scripts/dwarf2ctf/dwarf2ctf $(ctf-dir) -e $(ctf-filelist)
builtins :=
ctf-stamp := $(ctf-dir)/$(notdir $(M)-extmod).stamp
ctf-filelist := $(ctf-dir)/$(notdir $(M)-extmod).ctf.filelist

endif

# All the modules' CTF likewise depends on the stamp file.

all-module-ctfs = $(addprefix $(ctf-dir)/,$(notdir $(modules:.ko=.mod.ctf)))
$(all-module-ctfs): $(ctf-stamp)

# This ensures that the (possibly very long) prerequisite list is written out
# using one shell invocation per prerequisite.
#
# The empty line in this definition is crucial.
define add-ctf-filelist-cmd
	@echo "$(1)" >> $(ctf-filelist)

endef
define add-ctf-filelists-cmd
	$(foreach file,$(1),$(call add-ctf-filelist-cmd,$(file)))
endef

$(ctf-filelist): $(builtins) $(modules:.ko=.o) | $(modules:.ko=.sdtinfo.c)
	@rm -f $(ctf-filelist);
	@mkdir -p $(ctf-dir);
	$(call add-ctf-filelists-cmd,$^)

# We depend upon a stamp file in lieu of the builtin modules' CTF files, because
# the names of the generated CTF files for the builtins are so variable.
# (Standalone modules get their own per-module stamp files.)
# The stamp file then depends on the .o files for the modules, and on the
# sdtinfo files (for the same reason that the sdtstub does).
$(ctf-stamp): $(ctf-filelist)
	$(call if_changed,ctf)
	@shopt -s nullglob; \
	for name in $(ctf-dir)/*.builtin.ctf; do \
		[[ -f $${name}.new ]] || rm -f $$name; \
	done; \
	for name in $(ctf-dir)/*.ctf.new; do \
		$(srctree)/scripts/move-if-change $$name $${name%.new}; \
	done
	@touch $(ctf-stamp)

# Expands to the names of the CTF files to be incorporated into this module.
# The former is used in prerequisite lists, thanks to secondary expansion.

module-ctfs-modular-prereq = $$(addprefix $(ctf-dir)/,$$(notdir $$*.mod.ctf))
module-ctfs-modular = $(addprefix $(ctf-dir)/,$(notdir $*.mod.ctf))

# Expands to the name of a CTF file, given a target of a module name given to
# one of the link rules below.

ctf-module-name = $(addprefix $(ctf-dir)/,$(notdir $(basename $@)).mod.ctf)

# Expands to a series of objcopy --add-section arguments to add all
# necessary CTF files to a module, with appropriate section names.
# We also take advantage of the opportunity to strip the guaranteed-
# useless debugging information out of ctf.ko at the same time.

module-ctf-flags = $(if $(filter ctf.ko,$(notdir $@)), \
		   --strip-debug \
		   $(shell for builtin in $(ctf-dir)/*.builtin.ctf; do \
			       printf "%s" "--add-section .ctf.$$(basename $$builtin .builtin.ctf)=$$builtin "; \
			   done), \
		   --add-section .ctf=$(ctf-module-name))

# We have to put content in our dummy no-CTF files because --add-section
# in binutils 2.20 silently fails if asked to add an empty file as a section.

cmd_touch_ctf = @for name in $(filter $(ctf-dir)/%,$(module-ctfs-modular)); do \
		    test -f $$name || dd if=/dev/zero of=$$name bs=1 count=1 2>/dev/null; \
		done

else		# !CONFIG_CTF

module-ctfs-modular-prereq =
module-ctfs-builtin =
module-ctf-flags =
ctf-dir = ///.nonexistent
cmd-touch-ctf = @:

endif

# Step 7), final link of the modules
quiet_cmd_ld_ko_o = LD [M]  $@
      cmd_ld_ko_o = $(LD) -r $(LDFLAGS)					\
			     $(KBUILD_LDFLAGS_MODULE) $(LDFLAGS_MODULE) \
			     $(LDFLAGS_$(modname)) -o $@.tmp		\
			     $(patsubst $(ctf-dir)/%,,$(filter-out FORCE,$^)) && \
		    $(OBJCOPY) $(module-ctf-flags) $@.tmp $@ && rm -f $@.tmp

$(modules): %.ko : %.o %.mod.o $(module-sdt-modular-prereq) $(module-ctfs-modular-prereq) FORCE
	$(call cmd_touch_ctf)
	$(call if_changed,ld_ko_o)

targets += $(modules)

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE

FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif


# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable se we can use it in if_changed and friends.

.PHONY: $(PHONY)
